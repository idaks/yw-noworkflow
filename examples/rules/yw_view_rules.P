

yw_source_file(SourceId, SourceFile) :-
    extract_source(SourceId, SourceFile).

yw_workflow_script(WorkflowId, WorkflowName, SourceId, SourceFile) :-
    yw_workflow(WorkflowId, WorkflowName, nil, SourceId,_,_),
    yw_source_file(SourceId, SourceFile).

yw_program(ProgramId, ProgramName, ParentWorkflowId, SourceId, BeginLine, EndLine) :-
    program(ProgramId, ProgramName, _, BeginId, EndId),
    annotation(BeginId, SourceId, BeginLine,_,_,_),
    annotation(EndId, SourceId, EndLine,_,_,_),
    yw_parent_workflow(ProgramId, ParentWorkflowId).

yw_workflow(WorkflowId, WorkflowName, ParentWorkflowId, SourceId, BeginLine, EndLine) :-
    yw_program(WorkflowId, WorkflowName, ParentWorkflowId, SourceId, BeginLine, EndLine),
    workflow(WorkflowId).

yw_workflow_step(StepId, StepName, WorkflowId, SourceId, BeginLine, EndLine) :-
    yw_program(StepId, StepName, WorkflowId, SourceId, BeginLine, EndLine),
    not function(StepId),
    WorkflowId \== 'nil'.

yw_function(FunctionId, FunctionName, ParentWorkflowId, SourceId, BeginLine, EndLine) :-
    yw_program(FunctionId, FunctionName, ParentWorkflowId, SourceId, BeginLine, EndLine),
    function(FunctionId).

yw_parent_workflow(ProgramId, WorkflowId) :-
    has_subprogram(WorkflowId, ProgramId).
yw_parent_workflow(ProgramId, WorkflowId) :-
    not has_subprogram(_,ProgramId),
    WorkflowId = nil.

yw_in_port(ProgramId, ProgramName, PortId, PortName, DataId, DataName) :-
    port(PortId, 'in', PortName, _, _, DataId),
    has_in_port(ProgramId, PortId),
    yw_program(ProgramId, ProgramName,_,_,_,_),
    data(DataId,DataName,_).

yw_inflow(WorkflowId, WorkflowName, ProgramDataId, DataName, ProgramId, ProgramName) :-
    yw_in_port(ProgramId,ProgramName,_,_,ProgramDataId,DataName),
    yw_in_port(WorkflowId,WorkflowName,_,_,_,DataName),
    yw_parent_workflow(ProgramId,WorkflowId),
    data(ProgramDataId,DataName,_).

yw_flow(SourceProgramId, SourceProgramName, DataId, DataName, SinkProgramId, SinkProgramName) :-
    yw_out_port(SourceProgramId,SourceProgramName,_,_,DataId,_),
    yw_in_port(SinkProgramId,SinkProgramName,_,_,DataId,_),
    data(DataId,DataName,_).

yw_outflow(ProgramId, ProgramName,ProgramDataId, DataName, WorkflowId, WorkflowName) :-
    yw_out_port(ProgramId,ProgramName,_,_,ProgramDataId,DataName),
    yw_out_port(WorkflowId,WorkflowName,_,_,_,DataName),
    yw_parent_workflow(ProgramId,WorkflowId),
    data(ProgramDataId,DataName,_).

yw_out_port(ProgramId, ProgramName, PortId, PortName, DataId, DataName) :-
    port(PortId, 'out', PortName, _, _, DataId),
    has_out_port(ProgramId, PortId),
    yw_program(ProgramId, ProgramName,_,_,_,_),
    data(DataId,DataName,_).

yw_qualified_name(EntityType, Id, QualifiedName) :-
    program(Id,_,QualifiedName,_,_),
    EntityType = program.
yw_qualified_name(EntityType, Id, QualifiedName) :-
    port(Id,_,_,QualifiedName,_,_),
    EntityType = port.
yw_qualified_name(EntityType, Id, QualifiedName) :-
    data(Id,_,QualifiedName),
    EntityType = data.

yw_description(EntityType, Id, Name, Description) :-
    program(Id, Name, _, BeginAnnotationId, _),
    annotation_qualifies(DescAnnotationId, BeginAnnotationId),
    annotation(DescAnnotationId, _, _, 'desc', _, Description),
    EntityType = program.
yw_description(EntityType, Id, Name, Description) :-
    port(Id,_,Name,_,PortAnnotationId, _),
    annotation_qualifies(DescAnnotationId, PortAnnotationId),
    annotation(DescAnnotationId, _, _, 'desc', _, Description),
    EntityType = port.
