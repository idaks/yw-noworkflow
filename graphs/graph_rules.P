
gv_graph(Name, Title, Layout) :-
    nl,
    write('digraph '), write(Name), writeln(' {'),
    write('rankdir='), writeln(Layout),
    writeln('fontname=Courier; fontsize=18; labelloc=t'),
    write('label="'), write(Title), writeln('"').

gv_cluster(Name, Color) :-
    write('subgraph cluster_'), write(Name), write(' { label=""; color='), write(Color), write('; penwidth=2'), nl,
    write('subgraph cluster_'), write(Name), write('_inner { label=""; color=white'), nl.

gv_cluster_end() :-
    writeln('}}').

gv_node_style_data() :-
    writeln('node[shape=box style="rounded,filled" fillcolor="#FFFFCC" peripheries=1 fontname=Helvetica]').

gv_node_style_param() :-
    writeln('node[shape=box style="rounded,filled" fillcolor="#FFFFFF" peripheries=1 fontname=Helvetica]').

gv_node_style_workflow_port() :-
    writeln('node[shape=circle fillcolor="#FFFFFF" peripheries=1 width=0.2]').

gv_graph_end() :-
    writeln('}'),
    nl.

gv_data_in_nodes(WorkflowId) :-
    yw_data(DataId, DataName, WorkflowId, _),
    not yw_data_only_used_as_param(DataId),
    writeq(DataName), nl,
    fail
    ;
    true.


gv_data_param_nodes(WorkflowId) :-
    yw_data(DataId, DataName, WorkflowId, _),
    yw_data_used_as_param(DataId),
    writeq(DataName), nl,
    fail
    ;
    true.

gv_data_to_data_edges(WorkflowId) :-
    yw_data(DownstreamDataId, DownstreamDataName, WorkflowId, _),
    yw_data(UpstreamDataId, UpstreamDataName, WorkflowId, _),
    yw_data_immediately_downstream(UpstreamDataId, DownstreamDataId),
    writeq(UpstreamDataName),
    write(' -> '),
    writeq(DownstreamDataName), nl,
    fail
    ;
    true.

gv_inflow_nodes(WorkflowId) :-
    yw_inflow_data(WorkflowId, _, _, DataName),
    write(DataName), write('_inflow [label=""]'), nl,
    fail
    ;
    true.

gv_outflow_nodes(WorkflowId) :-
    yw_outflow_data(WorkflowId, _, _, DataName),
    write(DataName), write('_outflow [label=""]'), nl,
    fail
    ;
    true.

gv_inflow_to_data_edges(WorkflowId) :-
    yw_inflow_data(WorkflowId, _, _, DataName),
    write(DataName), write('_inflow'),
    write(' -> '),
    writeq(DataName), nl,
    fail
    ;
    true.

gv_data_to_outflow_edges(WorkflowId) :-
    yw_outflow_data(WorkflowId, _, _, DataName),
    writeq(DataName),
    write(' -> '),
    write(DataName), write('_outflow'), nl,
    fail
    ;
    true.


:- table yw_data_used_as_in/1.
yw_data_used_as_in(DataId) :-
    yw_step_input(_, _, in, _, _, DataId, _).

:- table yw_data_used_as_param/1.
yw_data_used_as_param(DataId) :-
    yw_step_input(_, _, param, _, _, DataId, _).

:- table yw_data_only_used_as_param/1.
yw_data_only_used_as_param(DataId) :-
    yw_data_used_as_param(DataId),
    not yw_data_used_as_in(DataId).

:- table yw_inflow_data/4.
yw_inflow_data(WorkflowId, WorkflowName, DataId, DataName) :-
    yw_inflow(WorkflowId, WorkflowName, DataId, DataName, _, _).

:- table yw_outflow_data/4.
yw_outflow_data(WorkflowId, WorkflowName, DataId, DataName) :-
    yw_outflow(_, _, DataId, DataName, WorkflowId, WorkflowName).

:- table yw_data_immediately_downstream/2.
yw_data_immediately_downstream(UpstreamDataId,DownstreamDataId) :-
    yw_step_input(StepId, _, _, _, _, UpstreamDataId, _),
    yw_step_output(StepId, _, _, _, _, DownstreamDataId, _).
